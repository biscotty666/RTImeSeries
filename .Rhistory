summary(m1)
checkresiduals(m1)
data <- getSymbols("CA.PA",
from="2019-11-25",
to = "2020-11-24",
src = 'yahoo',
auto.assign = F)
head(data)
tail(data)
adj <- data[,5]
head(adj)
adj
dev.off()
plot(data[,6], main ="Adjusted Closing Price")
log <- periodReturn(adj,period = "daily", type = "log", leading = TRUE)
log <- 1+log
head(log)
logr <- diff(log)
narf <- function (x) {
x[is.infinite(x)] <- 1
return(x)
}
adj$logr <- narm(narf(adj$logr))
head(Sale_of_fish) #See head of the dataset
tail(Sale_of_fish) #see tail of the dataset
#work with the number of sales from dataset
adj <- select(Sale_of_fish, -c("year", "month", "end.of.period", "value..E.", "unsoldes..Kg."))
adj$sales <- as.numeric(gsub(' ', '', adj$sales))
adj$start <- dmy(adj$start)##This tells you that the data series is in a time series format
#work with the number of sales from dataset
adj <- select(Sale_of_fish, -c("year", "month", "end.of.period", "value..E.", "unsold..Kg."))
adj$sales <- as.numeric(gsub(' ', '', adj$sales))
adj$start <- dmy(adj$start)##This tells you that the data series is in a time series format
adj$logr <- log(lag(adj$sales)) - log(adj$sales)
head(adj)
narm <- function (x) {
x[is.na(x)] <- 1
return(x)
}
adj$logr <- narm(adj$logr)
head(adj)
max_Date <- max(adj$start)
min_Date <- min(adj$start)
test_ts <- ts(adj$logr, end=c(year(max_Date), month(max_Date)),start=c(year(min_Date), month(min_Date)),frequency=12)#freq 12 => Monthly data
logr <- adj
logr
dev.off() #to face margin problem error
plot(test_ts)
plot(stl(test_ts,s.window = "periodic"))
# both acf() and pacf() generates plots by default
acf = acf(test_ts, main='ACF Plot', lag.max=100) # autocorrelation
pacf.logr = pacf(test_ts, main='PACF Plot', lag.max=100) # partial autocorrelation
#Augmented Dickey-Fuller(ADF) Test
print(adf.test(test_ts)) # p-value < 0.05 indicates the TS is stationary
#Estimate the coefficients Using Seasonal Arima model
m1 <- auto.arima(test_ts, seasonal = TRUE)
summary(m1)
#Check Accuracy
accuracy(forecast(m1))
#studying the residues
checkresiduals(m1) # p-value over .05 confirms no autocorrelations
#### Analysis for Yahoo finance data
#Import important library
library(quantmod)
library(fpp)
library(backtest)
#read yahoo finance datasets for last one year CA.PA
data <- getSymbols("CA.PA", from="2019-11-25",to = "2020-11-24" ,src="yahoo", auto.assign=F)
head(data)#see the head of dataset
tail(data) #see the tail of dataset
adj <- data[,5]
adj
dev.off() #to face margin problem error
plot(data[,6], main = "Adhusted Closing Price")
log <- periodReturn(adj,period = "daily", type = "log", leading = TRUE)
log <- 1+log
head(log)
#differentiate
logr <- diff(log)
narf <- function (x) {
x[is.infinite(x)] <- 1
return(x)
}
adj$logr <- narm(narf(adj$logr))
# install.packages("corrplot")
# install.packages("PerformanceAnalytics")
library(fpp)
head(fuel)
# install.packages("corrplot")
# install.packages("PerformanceAnalytics")
library(fpp)
head(fuel)
nrow(fuel)
fuel$Litres
fuel$Litres
fuel2 <- fuel[fuel$Litres<2,]
fuel2
nrow(fuel2)
summary(fuel2[,"Carbon"])
sd(fuel2[,"Carbon"])
ausbeer
head(ausbeer)
?head
head(ausbeer, n=24L)
library(fpp)
?autoplot
library(ggplot2)
?autoplot
?autoplot
library(forecast)
?autoplot
?autoplot
autoplot(elecsales) +
xlab("Year") + ylab("Gwh") +
ggtitle("Annual Electricity Sales in South Australia")
autoplot(elecsales) +
autolayer(ma(elecsales, 5), series = "5-MA") +
xlab("Year") + ylab("Gwh") +
ggtitle("Annual electricity sales in South Australia") +
scale_color_manual(values = c("Data" = "grey50", "5-MA" = "red"),
breaks = c("Data", "5-MA"))
install.packages("fpp2")
library(fpp2)
library(ggplot2)
library(forecast)
autoplot(elecsales) +
xlab("Year") + ylab("Gwh") +
ggtitle("Annual Electricity Sales in South Australia")
autoplot(elecsales) +
autolayer(ma(elecsales, 5), series = "5-MA") +
xlab("Year") + ylab("Gwh") +
ggtitle("Annual electricity sales in South Australia") +
scale_color_manual(values = c("Data" = "grey50", "5-MA" = "red"),
breaks = c("Data", "5-MA"))
install.packages("fpp3")
library(fpp3)
library(ggplot2)
library(forecast)
autoplot(elecsales) +
xlab("Year") + ylab("Gwh") +
ggtitle("Annual Electricity Sales in South Australia")
autoplot(elecsales) +
autolayer(ma(elecsales, 5), series = "5-MA") +
xlab("Year") + ylab("Gwh") +
ggtitle("Annual electricity sales in South Australia") +
scale_color_manual(values = c("Data" = "grey50", "5-MA" = "red"),
breaks = c("Data", "5-MA"))
library(fpp2)
library(ggplot2)
ma(elecsales, 5)
ma(elecsales, 5)
autoplot(elecsales) +
autolayer(ma(elecsales, 5), series = "5-MA") +
xlab("Year") + ylab("Gwh") +
ggtitle("Annual electricity sales in South Australia") +
scale_color_manual(values = c("Data" = "grey50", "5-MA" = "red"),
breaks = c("Data", "5-MA"))
?autoplot
autoplot(elecsales) +
autolayer(ma(elecsales, 5), series = "5-MA") +
xlab("Year") + ylab("Gwh") +
ggtitle("Annual electricity sales in South Australia") +
scale_color_manual(values = c("Data" = "grey50", "5-MA" = "red"),
breaks = c("Data", "5-MA"))
beer2 <- window(ausbeer, start = 1992)
ma4 <- ma(beer2, order = 4, centre = FALSE)
ma2x4 <- ma(beer2, order = 4, centre = TRUE)
ma4
ma2x4
autoplot(elecsales, series = "Data") +
autolayer(ma(elecsales, 5), series = "5-MA") +
xlab("Year") + ylab("Gwh") +
ggtitle("Annual electricity sales in South Australia") +
scale_color_manual(values = c("Data" = "grey50", "5-MA" = "red"),
breaks = c("Data", "5-MA"))
autoplot(elecequip, series = "Data") +
autolayer(ma(elecequip, 12), series = "12-MA") +
xlab("Year") + ylab("New Orders Index") +
ggtitle("Electrical Equipment Manufacturing (Euro Zone)") +
scale_color_manual(values = c("Data" = "grey50", "12-MA" = "red"),
breaks = c("Data", "12-MA"))
library(fpp)
str(melsyd)
plot(melsyd[,"Economy.Class"],
main = "Economy class passengers: Melbourne-Sydney",
xlab = "Year",
ylab = "Thousands")
head(a10, n = -1L)
plot(a10,
ylab = "$ million",
xlab = "Year",
main = "Antidiabetic drug sales")
seasonplot(a10,
ylab = "$ million", xlab = "Year",
main = "Antidiabetic drug sales",
year.labels = TRUE, year.labels.left = TRUE,
pch = 19,
col = 1:20)
monthplot(a10,
ylab = "$ million",
xlab = "Month",
xaxt = "n",
main = "Seasonal deviation plot: ADB Drug Sales")
axis(1,
at = 1:12,
labels = month.abb,
cex = 0.8) # cex here sets the magnification used for x axis
plot(jitter(fuel[,5]),
jitter(fuel[,8]),
xlab = "city mpg",
ylab = "Carbon Footprint")
pairs(fuel[,-c(1:2, 4, 7)], pch = 19)
library(fpp2)
elecequip <- decompose(type = "multiplicative") %>%
autoplot() +
xlab("Year") +
ggtitle("Classical Multiplicative Decomposition of Electrical Equipment Index")
elecequip %>% decompose(type = "multiplicative") %>%
autoplot() +
xlab("Year") +
ggtitle("Classical Multiplicative Decomposition of Electrical Equipment Index")
elecequip %>%
decompose(type = "multiplicative") %>%
autoplot() +
xlab("Year") +
ggtitle("Classical Multiplicative Decomposition of Electrical Equipment Index")
?decompose
elecequip %>%
decompose(type = "additive") %>%
autoplot() +
xlab("Year") +
?ggtitle("Classical Multiplicative Decomposition of Electrical Equipment Index")
elecequip %>%
decompose(type = "multiplicative") %>%
autoplot() +
xlab("Year") +
?ggtitle("Classical Multiplicative Decomposition of Electrical Equipment Index")
library(fpp2)
elecequip %>%
decompose(type = "multiplicative") %>%
autoplot() +
xlab("Year") +
?ggtitle("Classical Multiplicative Decomposition of Electrical Equipment Index")
elecequip %>%
decompose(type = "multiplicative") %>%
autoplot() +
xlab("Year") +
?ggtitle("Classical Multiplicative Decomposition of Electrical Equipment Index")
library(fpp2)
library(ggplot2)
elecequip %>%
decompose(type = "multiplicative") %>%
autoplot() +
xlab("Year") +
?ggtitle("Classical Multiplicative Decomposition of Electrical Equipment Index")
elecequip %>%
decompose(type = "multiplicative") %>%
autoplot() +
xlab("Year") +
ggtitle("Classical Multiplicative Decomposition of Electrical Equipment Index")
elecequip %>%
decompose(type = "additive") %>%
autoplot() +
xlab("Year") +
ggtitle("Classical Multiplicative Decomposition of Electrical Equipment Index")
library(seasonal)
install.packages(seasonal)
install.packages("seasonal")
# install.packages("seasonal")
library(seasonal)
elecequip %>%
seas(x11 = "") -> fit
autoplot(fit) +
ggtitle("Classical Multiplicative Decomposition of Electrical Equipment Index")
elecequip %>%
seas(x11 = "") -> fit
autoplot(fit) +
ggtitle("X11 Multiplicative Decomposition of Electrical Equipment Index")
elecequip %>%
decompose(type = "additive") %>%
autoplot() +
xlab("Year") +
ggtitle("Additive Decomposition of Electrical Equipment Index")
elecequip %>%
decompose(type = "multiplicative") %>%
autoplot() +
xlab("Year") +
ggtitle("Multiplicative Decomposition of Electrical Equipment Index")
elecequip %>%
seas(x11 = "") -> fit
autoplot(fit) +
ggtitle("X11 Decomposition of Electrical Equipment Index")
?seasonal
library(seasonal)
elecequip %>%
autoplot() +
ggtitle("SEATS Decomposition of Electrical Equipment Index")
elecequip %>%
seas() %>%
autoplot() +
ggtitle("SEATS Decomposition of Electrical Equipment Index")
elecequip %>%
seas(x11 = "") -> fit
autoplot(fit) +
ggtitle("X11 Decomposition of Electrical Equipment Index")
elecequip %>%
decompose(type = "multiplicative") %>%
autoplot() +
xlab("Year") +
ggtitle("Classical Multiplicative Decomposition of Electrical Equipment Index")
library(fpp2)
library(seasonal)
elecequip %>%
seas() %>%
autoplot() +
ggtitle("SEATS Decomposition of Electrical Equipment Index")
elecequip %>%
decompose(type = "multiplicative") %>%
autoplot() +
xlab("Year") +
ggtitle("Classical Multiplicative Decomposition of Electrical Equipment Index")
library(fpp2)
elecequip %>%
stl(t.window = 13,
s.window = "periodic",
robust = TRUE) %>%
autoplot()
elecequip %>%
stl(t.window = 17,
s.window = "periodic",
robust = TRUE) %>%
autoplot()
elecequip %>%
stl(t.window = 7,
s.window = "periodic",
robust = TRUE) %>%
autoplot()
elecequip %>%
stl(t.window = 7,
s.window = 7,
robust = TRUE) %>%
autoplot()
elecequip %>%
stl(t.window = 7,
s.window = 17,
robust = TRUE) %>%
autoplot()
library(fpp)
fit <- stl(elecequip,
t.window = 13,
s.window = "periodic",
robust = TRUE)
fit %>% seasadj() %>%
autoplot() +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit <- stl(elecequip,
t.window = 13,
s.window = "periodic",
robust = TRUE)
fit %>% seasadj() %>%
autoplot() +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit %>% forecast(method = "naive") %>%
autoplot() +
ylab("New orders index")
library(forecast)
fit %>% forecast(method = "naive") %>%
autoplot() +
ylab("New orders index")
library(forecast)
fit %>% forecast(method = "naive") %>%
autoplot() +
ylab("New orders index")
fit <- stl(elecequip,
t.window = 13,
s.window = "periodic",
robust = TRUE)
fit %>% seasadj() %>%
autoplot() +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit <- stl(elecequip,
t.window = 13,
s.window = "periodic",
robust = TRUE)
fit %>% seasadj() %>% naive() %>%
autoplot() +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit %>% seasadj() %>% naive() %>%
autoplot() +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit %>% seasadj() %>% naive() %>%
autoplot() +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit %>% seasadj() %>% naive() %>%
autoplot() + + legendLabs("")
library(forecast)
fit %>% forecast(method = "naive") %>%
autoplot() +
ylab("New orders index")
fit <- stl(elecequip,
t.window = 13,
s.window = "periodic",
robust = TRUE)
fit %>% seasadj() %>% naive() %>%
autoplot() +
labs(level = "Level")
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit <- stl(elecequip,
t.window = 13,
s.window = "periodic",
robust = TRUE)
fit %>% seasadj() %>% naive() %>%
autoplot() +
labs(level = "Level") +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit <- stl(elecequip,
t.window = 13,
s.window = "periodic",
robust = TRUE)
fit %>% seasadj() %>% naive() %>%
autoplot() +
guides(colour = guide_legend(title = "Forecast")) +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit <- stl(elecequip,
t.window = 13,
s.window = "periodic",
robust = TRUE)
fit %>% seasadj() %>% naive() %>%
autoplot() +
guides(colours = guide_legend(title = "Forecast")) +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit <- stl(elecequip,
t.window = 13,
s.window = "periodic",
robust = TRUE)
fit %>% seasadj() %>% naive() %>%
autoplot() +
guides(colour = guide_legend(title = "Forecast")) +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
View(fit)
myfit <- fit %>% seasadj() %>% naive()
View(myfit)
fit <- stl(elecequip,
t.window = 13,
s.window = "periodic",
robust = TRUE)
fit %>% seasadj() %>% naive() %>%
autoplot() +
guides(colour = guide_legend(title = "Forecast")) +
labs(level = "Level")
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit <- stl(elecequip,
t.window = 13,
s.window = "periodic",
robust = TRUE)
fit %>% seasadj() %>% naive() %>%
autoplot() +
guides(colour = guide_legend(title = "Forecast")) +
labs(level = "Level") +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit %>% seasadj() %>% naive() %>%
autoplot() +
guides(colour = guide_legend(title = "Forecast")) +
labs(level = "Level") +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit %>% forecast(method = "naive") %>%
autoplot() +
ylab("New orders index")
myfit <- forecast(fit, method = "naive")
View(fit)
myfit <- forecast(fit, method = c("naive","ets"))
tsibbledata::elecequip %>%
model(stl = decomposition_model(
STL(Turnover),
ETS(season_adjust))) %>%
forecast(h = 12)
elecequip %>%
model(stl = decomposition_model(
STL(Turnover),
ETS(season_adjust))) %>%
forecast(h = 12)
fit %>% seasadj() %>% naive() %>%
autoplot() +
guides(colour = guide_legend(title = "Forecast")) +
labs(level = "Level") +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit %>% forecast(method = "naive") %>%
autoplot() +
ylab("New orders index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit %>% forecast(method = "naive") %>%
autoplot() +
ylab("New orders index")
fit %>% forecast(method = "naive") %>%
autoplot() +
ylab("New orders index")
myfit <- forecast(fit, method = "naive")
