library(tidyverse, lib.loc = "/usr/lib/R/site-library")
install.packages("fpp")
library(fpp)
install.packages("backtest")
library(backtest)
library(quantmod)
library(lubridate, lib.loc = "/usr/lib/R/site-library")
library(dplyr)
Sale_of_fish <- read.csv(https://raw.githubusercontent.com/quaesito/time-series-forecast-R/main/Fish%20dataset.csv)
Sale_of_fish <- read.csv('https://raw.githubusercontent.com/quaesito/time-series-forecast-R/main/Fish%20dataset.csv')
head(Sale_of_fish)
head(Sale_of_fish)
tail(Sale_of_fish)
print(head(Sale_of_fish))
print(tail(Sale_of_fish))
Sale_of_fish <- read.csv('https://raw.githubusercontent.com/quaesito/time-series-forecast-R/main/Fish%20dataset.csv')
head(Sale_of_fish)
tail(Sale_of_fish)
dailyActivity_df = read_csv('dailyActivity_merged.csv')
adj <- select(Sale_of_fish, -c("year", "month", "end.of.period", "value..E.", "unsoldes..Kg."))
View(Sale_of_fish)
adj <- select(Sale_of_fish, -c("year", "month", "end.of.period", "value..E.", "unsold..Kg."))
?day
adj <- select(Sale_of_fish, -c("year", "month", "end.of.period", "value..E.", "unsold..Kg."))
adj$sales <- as.numeric(gsub(' ', '', adj$sales))
adj$start <- day(adj$start)
adj <- select(Sale_of_fish, -c("year", "month", "end.of.period", "value..E.", "unsold..Kg."))
adj$sales <- as.numeric(gsub(' ', '', adj$sales))
adj$start <- day(adj$start)
adj$logr <- log(lag(adj$sales)) - log(adj$sales)
head(adj)
narm <- function (x) {
x[is.na(x)] <- 1
return(x)
}
adj <- select(Sale_of_fish, -c("year", "month", "end.of.period", "value..E.", "unsold..Kg."))
adj$sales <- as.numeric(gsub(' ', '', adj$sales))
adj$start <- dmy(adj$start)
adj$logr <- log(lag(adj$sales)) - log(adj$sales)
head(adj)
adj %>% mutate_at(2, ~replace_na(./1))
adj %>% mutate_at(2, ~replace_na(.,1))
adj %>% mutate_at(3, ~replace_na(.,1))
max_Date <- max(adj$start)
min_Date <- min(adj$start)
test_ts <- ts(adj$logr,
end=c(year(max_Date), month(max_Date)),
start=c(year(min_Date), month(min_Date)),
frequency=12)
logr <- adj
logr
adj <- adj %>% mutate_at(3, ~replace_na(.,1))
adj <- adj %>% mutate_at(3, ~replace_na(.,1))
max_Date <- max(adj$start)
min_Date <- min(adj$start)
test_ts <- ts(adj$logr,
end=c(year(max_Date), month(max_Date)),
start=c(year(min_Date), month(min_Date)),
frequency=12)
max_Date <- max(adj$start)
min_Date <- min(adj$start)
test_ts <- ts(adj$logr,
end=c(year(max_Date), month(max_Date)),
start=c(year(min_Date), month(min_Date)),
frequency=12)
logr <- adj
logr
plot(test_ts)
head(Sale_of_fish)
tail(Sale_of_fish)
adj <- select(Sale_of_fish, -c("year", "month", "end.of.period", "value..E.", "unsold..Kg."))
adj$sales <- as.numeric(gsub(' ', '', adj$sales))
adj$start <- dmy(adj$start)
adj$logr <- log(lag(adj$sales)) - log(adj$sales)
head(adj)
adj$logr <- log(lag(adj$sales)) - log(adj$sales)
head(adj)
adj <- adj %>% mutate_at(3, ~replace_na(.,1))
max_Date <- max(adj$start)
min_Date <- min(adj$start)
test_ts <- ts(adj$logr,
end=c(year(max_Date), month(max_Date)),
start=c(year(min_Date), month(min_Date)),
frequency=12)
logr <- adj
logr
plot(test_ts)
plot stl(test_ts, s.window = "periodic")
plot(stl(test_ts, s.window = "periodic"))
acf = acf(test_ts, main='ACF Plot', lag.max = 100)
pacf.logr = pacf(test_ts, main='PACF Plot', lag.max = 100)
print(adf.test(test_ts))
m1 <- auto.arima(test_ts, seasonal = TRUE)
summary(m1)
checkresiduals(m1)
data <- getSymbols("CA.PA",
from="2019-11-25",
to = "2020-11-24",
src = 'yahoo',
auto.assign = F)
head(data)
tail(data)
adj <- data[,5]
head(adj)
adj
head(adj)
View(data)
adj <- data[,4]
head(adj)
adj <- data[,5]
dev.off()
plot(data[,6], main ="Adjusted Closing Price")
log <- periodReturn(adj,period = "daily", type = "log", leading = TRUE)
log <- 1+log
head(log)
logr <- diff(log)
narf <- function (x) {
x[is.infinite(x)] <- 1
return(x)
}
adj <- select(Sale_of_fish, -c("year", "month", "end.of.period", "value..E.", "unsold..Kg."))
adj$sales <- as.numeric(gsub(' ', '', adj$sales))
adj$start <- dmy(adj$start)
adj$logr <- log(lag(adj$sales)) - log(adj$sales)
head(adj)
narm <- function (x) {
x[is.na(x)] <- 1
return(x)
}
adj$logr <- narm(adj$logr)
head(adj)
max_Date <- max(adj$start)
min_Date <- min(adj$start)
test_ts <- ts(adj$logr,
end=c(year(max_Date), month(max_Date)),
start=c(year(min_Date), month(min_Date)),
frequency=12)
logr <- adj
logr
plot(test_ts)
plot(stl(test_ts, s.window = "periodic"))
acf = acf(test_ts, main='ACF Plot', lag.max = 100)
pacf.logr = pacf(test_ts, main='PACF Plot', lag.max = 100)
print(adf.test(test_ts)) # p-value < 0.05 indicates stationary data
m1 <- auto.arima(test_ts, seasonal = TRUE)
summary(m1)
checkresiduals(m1)
data <- getSymbols("CA.PA",
from="2019-11-25",
to = "2020-11-24",
src = 'yahoo',
auto.assign = F)
head(data)
tail(data)
adj <- data[,5]
head(adj)
adj
dev.off()
plot(data[,6], main ="Adjusted Closing Price")
log <- periodReturn(adj,period = "daily", type = "log", leading = TRUE)
log <- 1+log
head(log)
logr <- diff(log)
narf <- function (x) {
x[is.infinite(x)] <- 1
return(x)
}
adj$logr <- narm(narf(adj$logr))
head(Sale_of_fish) #See head of the dataset
tail(Sale_of_fish) #see tail of the dataset
#work with the number of sales from dataset
adj <- select(Sale_of_fish, -c("year", "month", "end.of.period", "value..E.", "unsoldes..Kg."))
adj$sales <- as.numeric(gsub(' ', '', adj$sales))
adj$start <- dmy(adj$start)##This tells you that the data series is in a time series format
#work with the number of sales from dataset
adj <- select(Sale_of_fish, -c("year", "month", "end.of.period", "value..E.", "unsold..Kg."))
adj$sales <- as.numeric(gsub(' ', '', adj$sales))
adj$start <- dmy(adj$start)##This tells you that the data series is in a time series format
adj$logr <- log(lag(adj$sales)) - log(adj$sales)
head(adj)
narm <- function (x) {
x[is.na(x)] <- 1
return(x)
}
adj$logr <- narm(adj$logr)
head(adj)
max_Date <- max(adj$start)
min_Date <- min(adj$start)
test_ts <- ts(adj$logr, end=c(year(max_Date), month(max_Date)),start=c(year(min_Date), month(min_Date)),frequency=12)#freq 12 => Monthly data
logr <- adj
logr
dev.off() #to face margin problem error
plot(test_ts)
plot(stl(test_ts,s.window = "periodic"))
# both acf() and pacf() generates plots by default
acf = acf(test_ts, main='ACF Plot', lag.max=100) # autocorrelation
pacf.logr = pacf(test_ts, main='PACF Plot', lag.max=100) # partial autocorrelation
#Augmented Dickey-Fuller(ADF) Test
print(adf.test(test_ts)) # p-value < 0.05 indicates the TS is stationary
#Estimate the coefficients Using Seasonal Arima model
m1 <- auto.arima(test_ts, seasonal = TRUE)
summary(m1)
#Check Accuracy
accuracy(forecast(m1))
#studying the residues
checkresiduals(m1) # p-value over .05 confirms no autocorrelations
#### Analysis for Yahoo finance data
#Import important library
library(quantmod)
library(fpp)
library(backtest)
#read yahoo finance datasets for last one year CA.PA
data <- getSymbols("CA.PA", from="2019-11-25",to = "2020-11-24" ,src="yahoo", auto.assign=F)
head(data)#see the head of dataset
tail(data) #see the tail of dataset
adj <- data[,5]
adj
dev.off() #to face margin problem error
plot(data[,6], main = "Adhusted Closing Price")
log <- periodReturn(adj,period = "daily", type = "log", leading = TRUE)
log <- 1+log
head(log)
#differentiate
logr <- diff(log)
narf <- function (x) {
x[is.infinite(x)] <- 1
return(x)
}
adj$logr <- narm(narf(adj$logr))
